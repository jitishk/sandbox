# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_sample', [dirname(__file__)])
        except ImportError:
            import _sample
            return _sample
        if fp is not None:
            try:
                _mod = imp.load_module('_sample', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _sample = swig_import_helper()
    del swig_import_helper
else:
    import _sample
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


LNODE_NONE = _sample.LNODE_NONE
LNODE_FIRST = _sample.LNODE_FIRST
LNODE_SUP = _sample.LNODE_SUP
LNODE_LC = _sample.LNODE_LC
LNODE_MAX = _sample.LNODE_MAX
LNODE_NUM = _sample.LNODE_NUM
LNODE_ANY = _sample.LNODE_ANY
MTS_SAP_NFM_EXPORT = _sample.MTS_SAP_NFM_EXPORT
class mts_bind_options_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mts_bind_options_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mts_bind_options_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["version"] = _sample.mts_bind_options_t_version_set
    __swig_getmethods__["version"] = _sample.mts_bind_options_t_version_get
    if _newclass:version = _swig_property(_sample.mts_bind_options_t_version_get, _sample.mts_bind_options_t_version_set)
    __swig_setmethods__["flags"] = _sample.mts_bind_options_t_flags_set
    __swig_getmethods__["flags"] = _sample.mts_bind_options_t_flags_get
    if _newclass:flags = _swig_property(_sample.mts_bind_options_t_flags_get, _sample.mts_bind_options_t_flags_set)
    __swig_setmethods__["qlen"] = _sample.mts_bind_options_t_qlen_set
    __swig_getmethods__["qlen"] = _sample.mts_bind_options_t_qlen_get
    if _newclass:qlen = _swig_property(_sample.mts_bind_options_t_qlen_get, _sample.mts_bind_options_t_qlen_set)
    __swig_setmethods__["uuid"] = _sample.mts_bind_options_t_uuid_set
    __swig_getmethods__["uuid"] = _sample.mts_bind_options_t_uuid_get
    if _newclass:uuid = _swig_property(_sample.mts_bind_options_t_uuid_get, _sample.mts_bind_options_t_uuid_set)
    __swig_setmethods__["node"] = _sample.mts_bind_options_t_node_set
    __swig_getmethods__["node"] = _sample.mts_bind_options_t_node_get
    if _newclass:node = _swig_property(_sample.mts_bind_options_t_node_get, _sample.mts_bind_options_t_node_set)
    __swig_setmethods__["buff_sum"] = _sample.mts_bind_options_t_buff_sum_set
    __swig_getmethods__["buff_sum"] = _sample.mts_bind_options_t_buff_sum_get
    if _newclass:buff_sum = _swig_property(_sample.mts_bind_options_t_buff_sum_get, _sample.mts_bind_options_t_buff_sum_set)
    def __init__(self): 
        this = _sample.new_mts_bind_options_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sample.delete_mts_bind_options_t
    __del__ = lambda self : None;
mts_bind_options_t_swigregister = _sample.mts_bind_options_t_swigregister
mts_bind_options_t_swigregister(mts_bind_options_t)

MTS_ENUM_ZERO = _sample.MTS_ENUM_ZERO
MTS_ENUM_ONE = _sample.MTS_ENUM_ONE
MTS_ENUM_TWO = _sample.MTS_ENUM_TWO
MTS_OPC_ZERO = _sample.MTS_OPC_ZERO
MTS_OPC_ONE = _sample.MTS_OPC_ONE
MTS_OPC_TWO = _sample.MTS_OPC_TWO
MTS_OPC_THREE = _sample.MTS_OPC_THREE
class mts_addr_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mts_addr_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mts_addr_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["opcode"] = _sample.mts_addr_t_opcode_set
    __swig_getmethods__["opcode"] = _sample.mts_addr_t_opcode_get
    if _newclass:opcode = _swig_property(_sample.mts_addr_t_opcode_get, _sample.mts_addr_t_opcode_set)
    __swig_setmethods__["payload"] = _sample.mts_addr_t_payload_set
    __swig_getmethods__["payload"] = _sample.mts_addr_t_payload_get
    if _newclass:payload = _swig_property(_sample.mts_addr_t_payload_get, _sample.mts_addr_t_payload_set)
    def __init__(self): 
        this = _sample.new_mts_addr_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sample.delete_mts_addr_t
    __del__ = lambda self : None;
mts_addr_t_swigregister = _sample.mts_addr_t_swigregister
mts_addr_t_swigregister(mts_addr_t)


def mts_send(*args):
  return _sample.mts_send(*args)
mts_send = _sample.mts_send

def mts_bind(*args):
  return _sample.mts_bind(*args)
mts_bind = _sample.mts_bind


