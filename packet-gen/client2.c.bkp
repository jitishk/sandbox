#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

#define DST_PORT    58007
#define SRC_PORT    57002

#define IP      "2.2.2.1"
#define SIP      "2.2.2.2"

typedef struct rtp_hdr_ {
    uint32_t version    :2;
    uint32_t padding    :1;
    uint32_t extension  :1;
    uint32_t cscrc_count:4;
    uint32_t marker     :1;
    uint32_t payload    :7;
    uint32_t seq_no     :16;    // 32 bits

    uint32_t timestamp;         // 64 bits
    uint32_t ssrc_identifier;   // 96 bits
    uint32_t dummydata[1];      // 128 bits
} rtp_hdr_t;

enum {
    RTP_UDP_PORT_LO = 16384,
    RTP_UDP_PORT_HIGH = 32767,
};


void
send_packet(struct sockaddr_in *addr, struct sockaddr_in *srcaddr, int fd,
        in_port_t sport, in_port_t dport, void *payload, int payload_size) {
    char message[] = "Hello, World!";
    srcaddr->sin_port = htons(sport);
    addr->sin_port = htons(dport);

//   printf("2 %d- %d\n", sport, dport);
//   if (bind(fd, (struct sockaddr *) srcaddr, sizeof(*srcaddr)) < 0) {
//   	perror("bind");
//   	exit(1);
//   }
    rtp_hdr_t rtp_hdr;
    memset(&rtp_hdr, 0, sizeof(rtp_hdr));
    rtp_hdr.version = 1;
    

    printf("3 %d- %d\n", sport, dport);
	if (sendto(fd, message, sizeof(message), 0, (struct sockaddr *) addr,
				sizeof(*addr)) < 0) {
		perror("sendto");
		exit(1);
	}
}

int32_t num_pkts_per_flow = 100;
int32_t num_flows = 100;
int32_t num_pkts = 100;
int32_t pkts_per_flow = 100;
int32_t interval = 10; //us
int main(int argc, char *argv[]) {
    struct sockaddr_in addr, srcaddr;
    int fd;

    perror("1");

    if ((fd = socket(AF_INET, SOCK_DGRAM, 0)) < 0) {
        perror("socket");
        exit(1);
    }

    memset(&addr, 0, sizeof(addr));
    addr.sin_family = AF_INET;
    addr.sin_addr.s_addr = inet_addr(IP);
    addr.sin_port = htons(DST_PORT);

    memset(&srcaddr, 0, sizeof(srcaddr));
    srcaddr.sin_family = AF_INET;
    srcaddr.sin_addr.s_addr = htonl(INADDR_ANY);
    srcaddr.sin_addr.s_addr = inet_addr(SIP);
    srcaddr.sin_port = htons(SRC_PORT);
    if (bind(fd, (struct sockaddr *) &srcaddr, sizeof(srcaddr)) < 0) {
        perror("bind");
        exit(1);
    }
    uint64_t sent_pkt_count = 0;
    num_flows = atoi(argv[1]);
    pkts_per_flow = atoi(argv[2]);
    interval = atoi(argv[3]);

    while (1) {
        for (int i=0; i<1; i++) {
            for (int j=0; j<num_flows; j++) {
                send_packet(&addr, &srcaddr, fd, i+4000, j+4000);
            }
            sent_pkt_count += num_flows;
        }
        if (sent_pkt_count >= num_flows*pkts_per_flow) {
            break;
        }
        usleep(interval);
    }
    printf("sent %llu packets", sent_pkt_count);

//    if (bind(fd, (struct sockaddr *) &srcaddr, sizeof(srcaddr)) < 0) {
//        perror("bind");
//        exit(1);
//    }
//
//    while (1) {
//        sleep(1);
//    }
    return 0;
}
